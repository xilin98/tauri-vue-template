// vitest.config.ts
import { fileURLToPath as fileURLToPath2, URL as URL2 } from "node:url";
import { mergeConfig } from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/vite@5.4.10_@types+node@22.9.0/node_modules/vite/dist/node/index.js";
import { defineConfig as defineConfig2 } from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/vitest@2.1.4_@types+node@22.9.0/node_modules/vitest/dist/config.js";

// package.json
var version = "2.0.1";

// vite.config.ts
import vue from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/@vitejs+plugin-vue@5.1.4_vite@5.4.10_vue@3.5.12/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import { fileURLToPath, URL } from "node:url";
import AutoImport from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/unplugin-auto-import@0.18.3/node_modules/unplugin-auto-import/dist/vite.js";
import Components from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/unplugin-vue-components@0.27.4_vue@3.5.12/node_modules/unplugin-vue-components/dist/vite.js";
import { defineConfig } from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/vite@5.4.10_@types+node@22.9.0/node_modules/vite/dist/node/index.js";
import vueDevTools from "file:///C:/Users/12624/Desktop/xst/node_modules/.pnpm/vite-plugin-vue-devtools@7.6.3_vite@5.4.10_vue@3.5.12/node_modules/vite-plugin-vue-devtools/dist/vite.mjs";
var __vite_injected_original_import_meta_url = "file:///C:/Users/12624/Desktop/xst/vite.config.ts";
var HOST = process.env.TAURI_DEV_HOST;
var PLATFORM = process.env.TAURI_PLATFORM;
process.env.VITE_APP_VERSION = version;
if (process.env.NODE_ENV === "production") {
  process.env.VITE_APP_BUILD_EPOCH = (/* @__PURE__ */ new Date()).getTime().toString();
}
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    vueDevTools(),
    AutoImport({
      imports: [
        "vue",
        "vue-router",
        "pinia",
        {
          "@/store": ["useStore"]
        }
      ],
      dts: "auto-imports.d.ts",
      vueTemplate: true
    }),
    Components({
      dts: "components.d.ts"
    })
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  css: {
    preprocessorMaxWorkers: true
  },
  clearScreen: false,
  envPrefix: ["VITE_", "TAURI_"],
  server: {
    port: 1420,
    strictPort: true,
    host: HOST || false,
    hmr: HOST ? {
      protocol: "ws",
      host: HOST,
      port: 1421
    } : void 0,
    watch: {
      ignored: ["**/src-tauri/**"]
    }
  },
  build: {
    outDir: "./dist",
    // See https://v2.tauri.app/reference/webview-versions/ for details
    target: "es2021",
    minify: !process.env.TAURI_DEBUG ? "esbuild" : false,
    emptyOutDir: true
  }
});

// vitest.config.ts
var __vite_injected_original_import_meta_url2 = "file:///C:/Users/12624/Desktop/xst/vitest.config.ts";
process.env.VITE_APP_VERSION = version;
if (process.env.NODE_ENV === "production") {
  process.env.VITE_APP_BUILD_EPOCH = (/* @__PURE__ */ new Date()).getTime().toString();
}
var vitest_config_default = mergeConfig(
  vite_config_default,
  defineConfig2({
    test: {
      globals: true,
      include: ["tests/unit/**/*.test.ts", "src/**/*.spec.ts"],
      root: fileURLToPath2(new URL2("./", __vite_injected_original_import_meta_url2)),
      setupFiles: ["./tests/setup/testglobals.ts"],
      coverage: {
        provider: "v8",
        reporter: ["text", "json", "json-summary"],
        include: ["!src/main.ts", "src/**/*.ts", "src/**/*.vue"],
        thresholds: {
          lines: 10,
          functions: 0,
          branches: 10,
          statements: 10
        }
      }
    }
  })
);
export {
  vitest_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
